#The code below creates two different lists, p1 and p2 and then each list is comprised of a list of lists aka "hands"
p1 = []
p2 = []

with open("0054_poker.txt", "r", newline='\n') as f:
    for x in f:
        p1.append(x[0:14])
        p2.append(x[15:29])

p1 = [x.split(sep=" ") for x in p1]
p2 = [x.split(sep=" ") for x in p2]

conversion = {'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}


def pair(hand):
    convert = [int(card[0]) if card[0] not in conversion.keys() else conversion[card[0]] for card in hand]
    
    counts = {}
        
    for x in convert:
        counts.update({x: convert.count(x)})

    if len(counts) == 4:
        return True
    
    else:
        return False

def two_pair(hand):
    convert = [int(card[0]) if card[0] not in conversion.keys() else conversion[card[0]] for card in hand]
    
    counts = {}
        
    for x in convert:
        counts.update({x: convert.count(x)})
        
    counts = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))

    if len(counts) == 3 and counts[list(counts.keys())[0]] == 2:     
        return True
    
    else:
        return False


def full_house(hand):
    """3 of a kind, two of a kind returns "True" if the hand is a full house"""
    card_value = []
    for x in hand:
        card_value.append(x[0])
    card_value.sort()
    y = card_value.count(card_value[0])
    x = card_value.count(card_value[-1])
    if x + y == 5:
        return True


def straight_flush(hand):
    """straight flush"""
    straight_check = [int(card[0]) if card[0] not in conversion.keys() else conversion[card[0]] for card in hand]
    suit = []
    card_value = []
    for x in hand:
        suit.append(x[1])
        card_value.append(x[0])
    card_value.sort()
    suit = suit.count(suit[0])
    if suit == 5 and max(straight_check) - min(straight_check) == 4:
        print(hand)
    else:
        print("False")


def straight(hand):
     convert = [int(card[0]) if card[0] not in ['T', 'J', 'Q', 'K', 'A'] else conversion[card[0]] for card in hand]
    
    if max(convert) - min(convert) == 4:
        return True
    
    else:
        return False
def four_of_a_kind(hand):

    hand_values = []

    counter = 0

    all_card_values = ['2','3','4','5','6','7','8','9','T','J','Q','K','A']

    #seperates values from the suits
    for cards in hand:
        hand_values.append(cards[0])
    #sorts same values to be next to each other
    hand_values.sort()

    for x in all_card_values:
        
        counter = 0
        
        for y in hand_values:
            if x != y:
                continue
        #counts reoccuring values       
            counter += 1
        #if there are exactly 4 like values, return true
        if counter == 4:
            return True
            break
        #if counter comes out to anything other than 4, continue 
        else:
            continue
    
def three_of_a_kind(hand):

    hand_values = []

    counter = 0

    all_card_values = ['2','3','4','5','6','7','8','9','T','J','Q','K']

    for cards in hand:
        hand_values.append(cards[0])

    hand_values.sort()

    for x in all_card_values:
        
        counter = 0
        
        for y in hand_values:
            if x != y:
                continue
                
            counter += 1

        if counter == 3:
            return True
            break
            
        else:
            continue


def flush(hand):
    """flush"""
    suit = []
    for x in hand:
        suit.append(x[1])
    suit = suit.count(suit[0])
    if suit == 5:
        return True

